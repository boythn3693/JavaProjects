/**
 * 
 * @author LuuDV
 */

package components.interfaces;

import components.entity.Partner;
import components.services.PartnerService;
import java.util.List;
import java.util.stream.Stream;
import javax.swing.table.DefaultTableModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import components.utils.StringHelpers;
import java.io.FileOutputStream;
import java.io.IOException;
import org.apache.commons.io.FilenameUtils;
import java.util.Iterator;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
//import org.apache.poi.ss.usermodel.CellStyle;
//import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;

//import com.itextpdf.text.Anchor;
//import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
//import com.itextpdf.text.Chapter;
//import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
//import com.itextpdf.text.Element;
//import com.itextpdf.text.Font;
//import com.itextpdf.text.FontFactory;
//import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
//import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
//import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class frmTabExportExcelPartner extends javax.swing.JPanel {
    
    PartnerService partnerService;
    DefaultTableModel tableModel;
    List<Partner> listFilter;
    List<Partner> listAll;
    String s_maDoiTac="", s_tenDoiTac="", s_nguoiDaiDien="", s_diaChi="", s_soDienThoai="";

    /**
     * Creates new form frmTabExportExcelPartner
     */
    public frmTabExportExcelPartner() {
        initComponents();
        partnerService = new PartnerService();
        
        try {
            List<Partner> listPartner = partnerService.getDataPartnerFilter2("", "", "", "", "");
            listAll = listPartner;

            getHeaderTable();
            for (int i = 0; i < listPartner.size(); i++) {
                Object[] item = new Object[6];
                item[0] = i+1;
                item[1] = listPartner.get(i).getPartnerId();
                item[2] = listPartner.get(i).getPartnerName();
                item[3] = listPartner.get(i).getAddress();
                item[4] = listPartner.get(i).getNumPhone();
                item[5] = listPartner.get(i).getRepresentFullname();
                tableModel.addRow(item);
            }
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtMaDoiTac = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtTenDoiTac = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNguoiDaiDien = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        txtSoDienThoai = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnExport = new javax.swing.JButton();
        txtDiaChi = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        btnExportPDF = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(780, 611));

        jLabel3.setText("Mã đối tác");

        jLabel1.setText("Tên đối tác:");

        jLabel2.setText("Người đại diện");

        btnFilter.setText("Lọc");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        jLabel5.setText("Số điện thoại");

        jLabel6.setText("Địa chỉ");

        btnExport.setText("Export Excel");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Mã đối tác", "Tên đối tác", "Địa chỉ", "Số điện thoại", "Người đại diện"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblData);

        btnExportPDF.setText("Export PDF");
        btnExportPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportPDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txtTenDoiTac, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNguoiDaiDien, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtMaDoiTac, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 226, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(72, 72, 72))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(426, 426, 426)
                        .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(316, 316, 316)
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)
                        .addComponent(btnExportPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(318, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMaDoiTac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTenDoiTac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtSoDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNguoiDaiDien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(17, 17, 17)
                .addComponent(btnFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExport)
                    .addComponent(btnExportPDF))
                .addContainerGap())
        );

        jLabel4.setText("DANH SÁCH ĐỐI TÁC");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void getHeaderTable() {
        Object[] obj = new Object[]{"STT", "Mã đối tác", "Tên đối tác", "Địa chỉ", "Số điện thoại", "Tên người đại diện"};
        tableModel = new DefaultTableModel(obj, 0);
        tblData.setModel(tableModel);
    }
    
    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        // TODO add your handling code here:
        try {
            String maDoiTac = txtMaDoiTac.getText();
            String tenDoiTac = txtTenDoiTac.getText();
            String nguoiDaiDien = txtNguoiDaiDien.getText();
            String diaChi = txtDiaChi.getText();
            String soDienThoai = txtSoDienThoai.getText();

            List<Partner> listPartner = partnerService.getDataPartnerFilter2(maDoiTac, tenDoiTac, nguoiDaiDien, diaChi, soDienThoai);
            listFilter = listPartner;
            s_maDoiTac = maDoiTac;
            s_tenDoiTac = tenDoiTac;
            s_nguoiDaiDien = nguoiDaiDien;
            s_diaChi = diaChi;
            s_soDienThoai = soDienThoai;
            
            getHeaderTable();
            for (int i = 0; i < listPartner.size(); i++) {
                Object[] item = new Object[6];
                item[0] = i+1;
                item[1] = listPartner.get(i).getPartnerId();
                item[2] = listPartner.get(i).getPartnerName();
                item[3] = listPartner.get(i).getAddress();
                item[4] = listPartner.get(i).getNumPhone();
                item[5] = listPartner.get(i).getRepresentFullname();
                tableModel.addRow(item);
            }
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
        try {
            String filename, dir;
            JFileChooser c = new JFileChooser();
            c.setAcceptAllFileFilterUsed(false);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("excel (.xlsx)", "xlsx");
            c.setFileFilter(filter);
            int rVal = c.showSaveDialog(frmTabExportExcelPartner.this);
            if (rVal == JFileChooser.APPROVE_OPTION) {
                filename = c.getSelectedFile().getName();
                if (!FilenameUtils.getExtension(filename).equalsIgnoreCase("xlsx")) {
                    filename = filename + ".xlsx";
                }
                dir = c.getCurrentDirectory().toString();
                FileOutputStream file = new FileOutputStream(dir + "/" +filename);
                XSSFWorkbook workbook = new XSSFWorkbook();
                XSSFSheet workSheet = workbook.createSheet("Sheet1");
                XSSFRow row;
                XSSFCell cellA;
                XSSFCell cellB;
                XSSFCell cellC;
                XSSFCell cellD;
                XSSFCell cellE;
                XSSFCell cellF;
                XSSFCell cellG;
                XSSFCell cellH;

                Iterator iter;
                if( listFilter != null ) {
                    iter = listFilter.iterator();
                } else {
                    iter = listAll.iterator();
                }
                
                XSSFFont font = workbook.createFont();
                font.setBold(true);
                font.setColor(IndexedColors.BLUE.index);
                XSSFCellStyle style = workbook.createCellStyle();
                style.setFont(font);

                row = workSheet.createRow((short)0); // ROW 1
                cellA = row.createCell((short)0);
                cellA.setCellValue("DANH SÁCH ĐỐI TÁC");
                cellA.setCellStyle(style);
                
                row = workSheet.createRow((short)1); // ROW 2
                cellA = row.createCell((short)0);
                cellA.setCellValue("Mã đối tác");
                cellB = row.createCell((short)1);
                cellB.setCellValue(s_maDoiTac);
                
                cellD = row.createCell((short)3);
                cellD.setCellValue("Tên đối tác");
                cellE = row.createCell((short)4);
                cellE.setCellValue(s_tenDoiTac);
                
                cellG = row.createCell((short)6);
                cellG.setCellValue("Người đại diện");
                cellH = row.createCell((short)7);
                cellH.setCellValue(s_nguoiDaiDien);
                
                row = workSheet.createRow((short)2); // ROW 3
                cellA = row.createCell((short)0);
                cellA.setCellValue("Số điện thoại");
                cellB = row.createCell((short)1);
                cellB.setCellValue(s_soDienThoai);
                
                cellD = row.createCell((short)3);
                cellD.setCellValue("Địa chỉ");
                cellE = row.createCell((short)4);
                cellE.setCellValue(s_diaChi);
                
                row = workSheet.createRow((short)3); // ROW 4
                cellA = row.createCell((short)0);
                cellA.setCellValue("STT");
                cellA.setCellStyle(style);
                
                cellB = row.createCell((short)1);
                cellB.setCellValue("Mã Đối tác");
                cellB.setCellStyle(style);

                cellC = row.createCell((short)2);
                cellC.setCellValue("Tên Đối tác");
                cellC.setCellStyle(style);

                cellD = row.createCell((short)3);
                cellD.setCellValue("Địa chỉ");
                cellD.setCellStyle(style);

                cellE = row.createCell((short)4);
                cellE.setCellValue("Số điện thoại");
                cellE.setCellStyle(style);

                cellF = row.createCell((short)5);
                cellF.setCellValue("Tên người đại diện");
                cellF.setCellStyle(style);

                int i = 4;
                while (iter.hasNext()) {
                    row = workSheet.createRow((short)i);
                    Partner partner = (Partner) iter.next();
                    
                    cellA = row.createCell((short)0);
                    cellA.setCellValue(i);

                    cellB = row.createCell((short)1);
                    cellB.setCellValue(partner.getPartnerId());

                    cellC = row.createCell((short)2);
                    cellC.setCellValue(partner.getPartnerName());

                    cellD = row.createCell((short)3);
                    cellD.setCellValue(partner.getAddress());

                    cellE = row.createCell((short)4);
                    cellE.setCellValue(partner.getNumPhone());
                    
                    cellE = row.createCell((short)5);
                    cellE.setCellValue(partner.getRepresentFullname());

                    i++;
                }
                workbook.write(file);
                workbook.close();
                file.close();

                StringHelpers.Message("Xuất file thành công!", "Thành công!", 1);
            }
        } catch( IOException ex) {
            StringHelpers.Message(ex.getMessage(), ex.getLocalizedMessage(), 2);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnExportPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportPDFActionPerformed
        // TODO add your handling code here:
        try {
            String filename, dir;
            JFileChooser c = new JFileChooser();
            int rVal = c.showSaveDialog(frmTabExportExcelPartner.this);
            if (rVal == JFileChooser.APPROVE_OPTION) {
                filename = c.getSelectedFile().getName();
                filename = filename + ".pdf";
                dir = c.getCurrentDirectory().toString();
                FileOutputStream file_export = new FileOutputStream(dir + "/" +filename);
                
                Document document = new Document();
                PdfWriter pdf_writer = PdfWriter.getInstance(document, file_export);
                document.open();
                
                document.add(new Paragraph("DANH SACH DOI TAC"));
                document.add(new Paragraph(" "));
                
                PdfPTable table = new PdfPTable(5);
                Stream.of("STT", "Ma Doi Tac", "Ten Doi Tac", "Dia Chi", "So Dien Thoai").forEach(columnTitle -> {
                  PdfPCell header = new PdfPCell();
                  header.setBackgroundColor(BaseColor.LIGHT_GRAY);
                  header.setBorderWidth(2);
                  header.setPhrase(new Phrase(columnTitle));
                  table.addCell(header);
                });
                
                Iterator iter;
                if( listFilter != null ) {
                    iter = listFilter.iterator();
                } else {
                    iter = listAll.iterator();
                }
                
                int i=1;
                while (iter.hasNext()) {
                    Partner partner = (Partner) iter.next();
                    table.addCell(i+"");
                    table.addCell(partner.getPartnerId()+"");
                    table.addCell(partner.getPartnerName());
                    table.addCell(partner.getAddress());
                    table.addCell(partner.getNumPhone());
                    i++;
                }

                document.add(table);
                document.close();

                StringHelpers.Message("Xuất file thành công!\n\nĐường dẫn: "+dir+"/"+filename, "Thành công!", 1);
            }
        } catch( IOException ex) {
            StringHelpers.Message(ex.getMessage(), ex.getLocalizedMessage(), 2);
        } catch (DocumentException ex) {
            Logger.getLogger(frmTabExportExcelPartner.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExportPDFActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnExportPDF;
    private javax.swing.JButton btnFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtMaDoiTac;
    private javax.swing.JTextField txtNguoiDaiDien;
    private javax.swing.JTextField txtSoDienThoai;
    private javax.swing.JTextField txtTenDoiTac;
    // End of variables declaration//GEN-END:variables
}
